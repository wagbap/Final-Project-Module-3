using System.Data;
using System.Data.SqlClient;
using Utilis;
using System.Reflection;
using Cursos;

namespace Biblio
{
    public class AutenticationAPI
    {
        public bool Login(string user, string pwd, ref DataSet ds)
        {
            ds = Login(user, pwd);

            return ds.Tables[0].Rows.Count > 0 ? true : false;
        }

        public DataSet Login(string user, string pwd)
        {
            SqlConnection cn = null;
            DataSet ds = null;

            try
            {
                string currentDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                string filePath = Path.Combine(currentDirectory, "ConsoleADONET1.ini");
                Utils.INIFile ini = new Utils.INIFile(filePath);
                string cnString = ini.ReadKey("Connection_Biblio");

                string qry = $"SELECT * FROM Login WHERE [User] = '{user}' AND [Password] = '{pwd}'";

                ds = BD.ExecutarSQL(cnString, qry);

                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    // Login successful
                    Console.WriteLine("Login successful!");
                }
                else
                {
                    // Login failed
                    Console.WriteLine("Invalid username or password. Please try again.");
                }
            }
            catch (Exception ex)
            {
                // Error occurred during login
                Console.WriteLine("An error occurred during login: " + ex.Message);
                throw;
            }
            finally
            {
                // Cleanup code here (if any)
            }

            return ds;
        }


        public class UserData
        {
            public string PrimeiroNome { get; set; }
            public string UltimoNome { get; set; }
            public int Tipo { get; set; } // Depending on your database design, this might need to be a different type
            public int Estado { get; set; } // Depending on your database design, this might need to be a different type
            public string User { get; set; }
            public string Password { get; set; }
        }

        public bool InsertUser(UserData userData)
        {
            string currentDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string filePath = Path.Combine(currentDirectory, "ConsoleADONET1.ini");
            Utils.INIFile ini = new Utils.INIFile(filePath);
            string cnString = ini.ReadKey("Connection_Biblio");

            SqlConnection cn = null;
            SqlTransaction pTrans = null;
            bool isTransacao = false;
            bool result = false;

            try
            {
                cn = BD.Abrir(cnString);
                pTrans = cn.BeginTransaction();
                isTransacao = true;

                string insertLoginQuery = @"INSERT INTO Login ([User], Password) 
                                    VALUES (@User, @Password);
                                    SELECT SCOPE_IDENTITY();";

                using (SqlCommand cmd = new SqlCommand(insertLoginQuery, cn, pTrans))
                {
                    cmd.Parameters.AddWithValue("@User", userData.User);
                    cmd.Parameters.AddWithValue("@Password", userData.Password);

                    object loginIdObj = cmd.ExecuteScalar();
                    if (loginIdObj != null && loginIdObj != DBNull.Value)
                    {
                        int loginId = Convert.ToInt32(loginIdObj);

                        string insertUserQuery = @"INSERT INTO Utilizadores (PrimeiroNome, UltimoNome, Tipo, Estado, LoginID) 
                                           VALUES (@PrimeiroNome, @UltimoNome, @Tipo, @Estado, @LoginID);";

                        using (SqlCommand insertUserCmd = new SqlCommand(insertUserQuery, cn, pTrans))
                        {
                            insertUserCmd.Parameters.AddWithValue("@PrimeiroNome", userData.PrimeiroNome);
                            insertUserCmd.Parameters.AddWithValue("@UltimoNome", userData.UltimoNome);
                            insertUserCmd.Parameters.AddWithValue("@Tipo", userData.Tipo);
                            insertUserCmd.Parameters.AddWithValue("@Estado", userData.Estado);
                            insertUserCmd.Parameters.AddWithValue("@LoginID", loginId);

                            insertUserCmd.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        throw new Exception("Failed to get the Login ID generated by the database.");
                    }
                }

                pTrans.Commit();
                isTransacao = false;
                result = true;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                if (isTransacao)
                {
                    try { pTrans.Rollback(); } catch { }
                }
                BD.Fechar(ref cn);
            }

            return result;
        }

        public bool ChangePwd(string username, string oldPwd, string newPwd)
        {
            bool result = false;
            string currentDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string filePath = Path.Combine(currentDirectory, "ConsoleADONET1.ini");
            Utils.INIFile ini = new Utils.INIFile(filePath);
            string cnString = ini.ReadKey("Connection_Biblio");

            SqlConnection cn = null;
            SqlTransaction pTrans = null;
            bool isTransacao = false;

            try
            {
                cn = BD.Abrir(cnString);
                pTrans = cn.BeginTransaction();
                isTransacao = true;

                string SQL = "SELECT * FROM Login WHERE [User] = " +
                Utils.UT_DuplicaPlicas(username) + " AND [Password]=" + Utils.UT_DuplicaPlicas(oldPwd);
                DataSet ds = BD.ExecutarSQL(cn, SQL, pTrans);
                if (ds.Tables[0].Rows.Count < 1)
                {
                    throw new Exception("User/password errados!");
                }
                BD.FecharDS(ref ds);

                SQL = "UPDATE Login SET [Password] = " + Utils.UT_DuplicaPlicas(newPwd) +
                        " WHERE [User] = " + Utils.UT_DuplicaPlicas(username);
                int num = BD.ExecutarDDL(cn, SQL, pTrans);
                if (num < 1)
                {
                    throw new Exception("Atualização correu mal!");
                }

                SQL = "SELECT * FROM HistoricoPasswords WHERE UserName = " + Utils.UT_DuplicaPlicas(username);
                ds = BD.ExecutarSQL(cn, SQL, pTrans);
                if (ds.Tables[0].Rows.Count < 1)
                {
                    SQL = "INSERT INTO HistoricoPasswords (UserName, QTrocaPass) " +
                        "VALUES (" + Utils.UT_DuplicaPlicas(username) + ", 1)";
                }
                else
                {
                    SQL = "UPDATE HistoricoPasswords SET QTrocaPass += 1 WHERE UserName =" + Utils.UT_DuplicaPlicas(username);
                }
                BD.FecharDS(ref ds);

                num = BD.ExecutarDDL(cn, SQL, pTrans);

                pTrans.Commit();
                isTransacao = false;

                result = true;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                if (isTransacao)
                {
                    try
                    {
                        pTrans.Rollback();
                    }
                    catch
                    {
                        // Log error
                    }
                }
                BD.Fechar(ref cn);
            }

            return result;
        }

       /* static void cleanDS(ref DataSet ds)
        {
            BD.FecharDS(ref ds);
        }*/




    }
}
